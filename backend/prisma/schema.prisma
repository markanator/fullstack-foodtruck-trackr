generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Role {
  id   String @id @unique @default(cuid())
  name String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users User[]
}

model User {
  id             String     @id @unique @default(cuid())
  clerkId        String?
  username       String     @unique
  email          String     @unique
  email_verified Boolean    @default(false)
  avatar         String?
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  // relations
  roles          Role[]
  reviews        Review[]
  favorites      Favorite[]
  ownedTrucks    Truck[]
}

model Truck {
  id          String      @id @unique @default(cuid())
  name        String
  slug        String
  published   Boolean     @default(false)
  cuisineType String?
  description String?
  priceRange  String?
  phone       String?
  views       BigInt?     @default(0)
  avatar      String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  // relations
  owner       User        @relation(fields: [ownerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  ownerId     String
  address     Location?   @relation(fields: [addressId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  addressId   String?
  menuItems   MenuItem[]
  reviews     Review[]
  stops       TruckStop[]
  favorites   Favorite[]
}

model Location {
  id             String      @id @unique @default(cuid())
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  address        String
  city           String
  state          String
  zip            String
  latitude       Float?
  longitude      Float?
  arriveAt       DateTime?
  departAt       DateTime?
  duration       Int?
  // relations
  truckStops     TruckStop[]
  truckAddresses Truck[]
}

model TruckStop {
  id         String   @id @unique @default(cuid())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  // relations
  truck      Truck    @relation(fields: [truckId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  truckId    String
  location   Location @relation(fields: [locationId], references: [id])
  locationId String   @unique
}

model Review {
  id        String   @id @unique @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  rating    Int
  body      String?
  // relations
  truck     Truck    @relation(fields: [truckId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  truckId   String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId    String
}

model Favorite {
  id        String   @id @unique @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  // relations
  truck     Truck    @relation(fields: [truckId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  truckId   String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId    String
}

model MenuItem {
  id          String   @id @unique @default(cuid())
  photo       String?
  name        String
  description String?
  price       Int?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  // relations
  truck       Truck    @relation(fields: [truckId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  truckId     String
}
