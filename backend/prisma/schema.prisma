// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model File {
  id        String   @id @unique @default(cuid())
  blob      Bytes
  createdAt DateTime
  updatedAt DateTime
  Image     Image?
}

model Image {
  file   File   @relation(fields: [fileId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  fileId String @unique

  contentType String
  altText     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User?
  truck     Truck?
}

model Password {
  hash String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model Role {
  id   String @id @unique @default(cuid())
  name String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users User[]
}

model User {
  id             String     @id @unique @default(cuid())
  email          String     @unique
  username       String     @unique
  firstName      String?
  lastName       String?
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  // relations
  avatar         Image?     @relation(fields: [avatarId], references: [fileId])
  avatarId       String?    @unique
  password       Password?
  roles          Role[]
  session        Session[]
  ownedTrucks    Truck[]
  truckReviews   Review[]
  truckFavorites Favorite[]
}

model Session {
  id             String   @id @default(cuid())
  createdAt      DateTime @default(now())
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String
  expirationDate DateTime
}

model Truck {
  id          String      @id @unique @default(cuid())
  name        String
  slug        String
  cuisineType String?
  description String?
  priceRange  String?
  address     String?
  phone       String?
  views       BigInt?     @default(0)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  // relations
  photo       Image?      @relation(fields: [photoId], references: [fileId])
  photoId     String?     @unique
  owner       User        @relation(fields: [ownerId], references: [id])
  ownerId     String
  stops       TruckStop[]
  reviews     Review[]
  favorites   Favorite[]
}

model Location {
  id         String      @id @unique @default(cuid())
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  address    String
  city       String
  state      String
  zip        String
  latitude   Float?
  longitude  Float?
  arriveAt   DateTime?
  departAt   DateTime?
  duration   Int?
  // relations
  truckStops TruckStop[]
}

model TruckStop {
  id         String    @id @unique @default(cuid())
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  // relations
  truck      Truck     @relation(fields: [truckId], references: [id])
  truckId    String
  location   Location? @relation(fields: [locationId], references: [id])
  locationId String?
}

model Review {
  id        String   @id @unique @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  rating    Int
  content   String?
  // relations
  truck     Truck    @relation(fields: [truckId], references: [id])
  truckId   String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
}

model Favorite {
  id        String   @id @unique @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  // relations
  truck     Truck    @relation(fields: [truckId], references: [id])
  truckId   String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
}
