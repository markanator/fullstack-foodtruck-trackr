generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["jsonProtocol"]
}

datasource db {
    provider = "sqlite"
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model File {
    id        String   @id @unique @default(cuid())
    blob      Bytes
    createdAt DateTime
    updatedAt DateTime
    Image     Image?
}

model Image {
    file   File   @relation(fields: [fileId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    fileId String @unique

    contentType String
    altText     String?

    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    user      User?
    truck     Truck?
    menuItem  MenuItem?
}

model Role {
    id          String   @id @unique @default(cuid())
    name        String   @unique
    description String?
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    users User[]
}

model User {
    id             String     @id @unique @default(cuid())
    name           String?
    email          String?    @unique
    emailVerified  DateTime?
    image          String?
    firstName      String?
    lastName       String?
    createdAt      DateTime   @default(now())
    updatedAt      DateTime   @updatedAt
    // relations
    role           Role?      @relation(fields: [roleId], references: [id])
    roleId         String?
    avatar         Image?     @relation(fields: [avatarId], references: [fileId])
    avatarId       String?    @unique
    accounts       Account[]
    sessions       Session[]
    ownedTrucks    Truck[]
    truckReviews   Review[]
    truckFavorites Favorite[]
}

model Truck {
    id          String      @id @unique @default(cuid())
    name        String
    slug        String
    cuisineType String?
    description String?
    priceRange  String?
    address     String?
    phone       String?
    views       Int?        @default(0)
    createdAt   DateTime    @default(now())
    updatedAt   DateTime    @updatedAt
    // relations
    photo       Image?      @relation(fields: [photoId], references: [fileId])
    photoId     String?     @unique
    owner       User        @relation(fields: [ownerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    ownerId     String
    stops       TruckStop[]
    reviews     Review[]
    favorites   Favorite[]
    menuItems   MenuItem[]
}

model Location {
    id         String     @id @unique @default(cuid())
    createdAt  DateTime   @default(now())
    updatedAt  DateTime   @updatedAt
    address    String
    city       String
    state      String
    zip        String
    latitude   Float?
    longitude  Float?
    arriveAt   DateTime?
    departAt   DateTime?
    duration   Int?
    // relations
    truckStops TruckStop?
}

model TruckStop {
    id         String    @id @unique @default(cuid())
    createdAt  DateTime  @default(now())
    updatedAt  DateTime  @updatedAt
    // relations
    truck      Truck     @relation(fields: [truckId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    truckId    String
    location   Location? @relation(fields: [locationId], references: [id])
    locationId String?   @unique
}

model Review {
    id        String   @id @unique @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    rating    Int
    content   String?
    // relations
    truck     Truck    @relation(fields: [truckId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    truckId   String
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    userId    String
}

model Favorite {
    id        String   @id @unique @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    // relations
    truck     Truck    @relation(fields: [truckId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    truckId   String
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    userId    String
}

model MenuItem {
    id          String   @id @unique @default(cuid())
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    name        String
    description String?
    price       Int?
    // relations
    truck       Truck    @relation(fields: [truckId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    truckId     String
    photo       Image?   @relation(fields: [photoId], references: [fileId], onDelete: SetNull, onUpdate: Cascade)
    photoId     String?  @unique
}
